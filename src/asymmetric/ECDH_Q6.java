package asymmetric;

import java.math.BigInteger;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.KeyAgreement;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import util.CryptoTools;

public class ECDH_Q6 {
	
	
	public static void main(String[] args) throws Exception {

		//STEP 1 - Generate ephemeral ECDH keypair
		//KeyPairGenerator kpg = KeyPairGenerator.getInstance("EC");
		//kpg.initialize(256); //Key of specific size generated by Alice
		//KeyPair kp = kpg.generateKeyPair(); //Alice's private key for herself 
		//byte[] ourPk = kp.getPublic().getEncoded();
		
		BigInteger a_pub_hex = new BigInteger("3059301306072A8648CE3D020106082A8648CE3D0301070342000450C35C2FB11926C2C91E089CFC743F9D942EE14B8D42E25AE6588C4F93DDFF6ACDF520F74AF3E2500EF2A5E2C346D4DA7E92C1F89AD9FD4F3ED1B97DC3F39DC8",16); 
		//BigInteger a_priv_hex = new BigInteger("3041020100301306072A8648CE3D020106082A8648CE3D0301070427302502010104200FE89D3070EECF985F971851B088EC97605A08D037F3CF3463FED25BCE0037B5",16);
		byte[] a_priv_hex = CryptoTools.hexToBytes("3041020100301306072A8648CE3D020106082A8648CE3D0301070427302502010104200FE89D3070EECF985F971851B088EC97605A08D037F3CF3463FED25BCE0037B5");

		//BigInteger bob_pub_hex = new BigInteger("3059301306072A8648CE3D020106082A8648CE3D03010703420004678DF0E72D7FC86006174E506B1729081E5D1201936EBA8A39E8741E4F713F8C29AE2E62038D95B36A585E2A87FEA73BE482611115457A3D3823EA5D79E31154",16);
		BigInteger bob_priv_hex = new BigInteger("3041020100301306072A8648CE3D020106082A8648CE3D030107042730250201010420090145EB296FD96158EDF5E59D20EBB8E7332BBE150784D91900DB2006980127",16);
		
		byte[] bob_pub_hex = CryptoTools.hexToBytes("3059301306072A8648CE3D020106082A8648CE3D03010703420004678DF0E72D7FC86006174E506B1729081E5D1201936EBA8A39E8741E4F713F8C29AE2E62038D95B36A585E2A87FEA73BE482611115457A3D3823EA5D79E31154");

		//BigInteger ct_hex = new BigInteger("1B709B07A06E10FF16E7D76422E564FB73E63FD8BD69D59E4692104B327896E8",16);
		byte[] ct_hex = CryptoTools.hexToBytes("1B709B07A06E10FF16E7D76422E564FB73E63FD8BD69D59E4692104B327896E8");
		//message is from Alice
		
		X509EncodedKeySpec alice_PublKy = new X509EncodedKeySpec(a_pub_hex.toByteArray());
		PKCS8EncodedKeySpec alice_PrivKy = new PKCS8EncodedKeySpec(a_priv_hex);

		X509EncodedKeySpec bob_PublKy = new X509EncodedKeySpec(bob_pub_hex);
		PKCS8EncodedKeySpec bob_PrivKy = new PKCS8EncodedKeySpec(bob_priv_hex.toByteArray());

		
		//STEP 2 - Read other's public key:
		//byte[] otherPk = parseHexBinary(alice_PublKy);
	    KeyFactory kf = KeyFactory.getInstance("EC");
	    //X509EncodedKeySpec pkSpec = new X509EncodedKeySpec(otherPk);
	    //PublicKey otherPublicKey = kf.generatePublic(alice_PublKy);
	    //generate keys AFTER encoding
	    PrivateKey a_Priv = kf.generatePrivate(alice_PrivKy);
	    PrivateKey b_Priv = kf.generatePrivate(bob_PrivKy);
	    
	    PublicKey a_Public = kf.generatePublic(alice_PublKy);
	    PublicKey b_Public = kf.generatePublic(bob_PublKy);


		//STEP 3 - Perform key agreement for both keys
		KeyAgreement ka = KeyAgreement.getInstance("ECDH"); 
		ka.init(a_Priv); //alice's private key (message from alice)
		ka.doPhase(b_Public, true); //Bob's public key (message to bob)
		byte[] sharedSecret = ka.generateSecret(); //customary to perform byte hashing
		System.out.printf( new String(sharedSecret));

		
		byte[] iv = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};	
		//Alice can use the sharedsecret to create AES instance
		//Key secretKey = new SecretKeySpec(sharedSecret, "AES"); 
		//Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding"); 
		//AlgorithmParameterSpec aps = new IvParameterSpec(iv);
		//cipher.init(Cipher.ENCRYPT_MODE, secretKey, aps);
		//byte[] ciphertext = cipher.doFinal(message);
		
		//Bob perform decryption using the sharedsecret
		Key secretKey = new SecretKeySpec(sharedSecret, "AES"); //adjust if using DES or AES
		Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding"); //adjust if using DES or AES
		IvParameterSpec aps= new IvParameterSpec(iv);
		cipher.init(Cipher.DECRYPT_MODE, secretKey, aps);
		byte[] plaintext = cipher.doFinal(ct_hex);
	
		//System.out.print("Original Message: %s\n", new String(message));
		System.out.print(new String(plaintext));

	
	}
		
	
	
	
	
	
	
}
